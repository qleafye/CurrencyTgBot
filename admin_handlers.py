from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime
import json

class AdminHandlers:
    def __init__(self, bot_instance):
        self.bot = bot_instance

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.bot._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            logs = self.bot.db.get_logs()
            users = self.bot.db.get_users()
            
            today = datetime.now().date()
            today_logs = [log for log in logs if datetime.strptime(log['timestamp'], '%Y-%m-%d %H:%M:%S').date() == today]
            
            stats = (
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                f"üìà –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(logs)}\n"
                f"üîÑ –û–ø–µ—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {len(today_logs)}\n"
                f"‚ú® –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {len(set(log['user_id'] for log in today_logs))}"
            )
            await update.message.reply_text(stats, parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    async def broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.bot._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
            
        if not context.args:
            await update.message.reply_text(
                "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n"
                "–ü—Ä–∏–º–µ—Ä: /broadcast –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã —Å 20:00 –¥–æ 21:00"
            )
            return
            
        try:
            message = ' '.join(context.args)
            users = self.bot.db.get_users()
            
            sent = 0
            failed = 0
            for user_id in users:
                try:
                    await context.bot.send_message(
                        chat_id=int(user_id),
                        text=f"üì¢ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ:*\n\n{message}",
                        parse_mode='Markdown'
                    )
                    sent += 1
                except Exception:
                    failed += 1
                    
            status = (
                "üì® *–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n"
                f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            )
            await update.message.reply_text(status, parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")

    async def add_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.bot._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        if not context.args:
            await update.message.reply_text(
                "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id>\n"
                "–ü—Ä–∏–º–µ—Ä: /addadmin 123456789"
            )
            return

        try:
            new_admin_id = int(context.args[0])
            if new_admin_id in self.bot.ADMIN_IDS:
                await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return

            self.bot.ADMIN_IDS.add(new_admin_id)
            self.bot.db.save_admin_ids(self.bot.ADMIN_IDS)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def remove_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.bot._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        if not context.args:
            await update.message.reply_text(
                "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeadmin <user_id>\n"
                "–ü—Ä–∏–º–µ—Ä: /removeadmin 123456789"
            )
            return

        try:
            admin_id = int(context.args[0])
            if admin_id == 873278697:  # –ó–∞—â–∏—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            if admin_id not in self.bot.ADMIN_IDS:
                await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return

            self.bot.ADMIN_IDS.remove(admin_id)
            self.bot.db.save_admin_ids(self.bot.ADMIN_IDS)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def list_admins(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.bot._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        admins_list = "\n".join([f"üë§ `{admin_id}`" for admin_id in self.bot.ADMIN_IDS])
        await update.message.reply_text(
            f"üìã *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n{admins_list}",
            parse_mode='Markdown'
        ) 
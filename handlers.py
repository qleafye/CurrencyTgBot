from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

class MessageHandlers:
    def __init__(self, bot_instance):
        self.bot = bot_instance

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.bot.db.save_user(update.message.from_user)
        self.bot.db.log_operation(
            update.message.from_user.id,
            'start',
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞'
        )
        
        keyboard = [
            [InlineKeyboardButton("üá®üá≥ CNY (–Æ–∞–Ω—å)", callback_data="105_165")],
            [InlineKeyboardButton("üá∫üá∏ USD (–î–æ–ª–ª–∞—Ä)", callback_data="105_58")],
            [InlineKeyboardButton("üá™üá∫ EUR (–ï–≤—Ä–æ)", callback_data="105_65")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        welcome_message = (
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Ä—É–±–ª—è—Ö.\n\n"
            "üî∏ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Ç–æ–≤–∞—Ä–∞\n"
            "2. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
            "üìä *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Ç–æ–≤–∞—Ä–∞:*"
        )
        await update.message.reply_text(welcome_message, parse_mode='Markdown', reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        base_help = (
            "üîç *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "üí° –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É!"
        )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        if self.bot._is_admin(update.effective_user.id):
            admin_help = (
                "\n\nüëë *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n"
                "/broadcast - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                "/addadmin - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "/removeadmin - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "/listadmins - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
            )
            help_text = base_help + admin_help
        else:
            help_text = base_help

        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
        self.bot.db.log_operation(
            query.from_user.id,
            'currency_selection',
            f'–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {query.data}'
        )
        
        callback_data = query.data
        give_id, get_id = map(int, callback_data.split("_"))
        min_rate = self.bot.api_handler.get_min_rate(give_id, get_id)

        if min_rate is not None:
            response = "üí∞ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:*"
            context.user_data['give_id'] = give_id
            context.user_data['get_id'] = get_id
            context.user_data['min_rate'] = min_rate
        else:
            response = "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

        await query.edit_message_text(text=response, parse_mode='Markdown')

    async def receive_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            price = float(update.message.text)
            min_rate = context.user_data.get('min_rate')

            if min_rate:
                result = price * min_rate
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç
                self.bot.db.log_operation(
                    update.message.from_user.id,
                    'calculation',
                    {
                        'input_amount': price,
                        'rate': min_rate,
                        'result': result + 1700
                    }
                )
                
                response = (
                    "üî¢ *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:*\n\n"
                    f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: `{result + 1700:.2f}` RUB\n\n"
                    "üì± –î–ª—è –∑–∞–∫–∞–∑–∞: @sytnixxstore\n\n"
                    "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:"
                )

                keyboard = [
                    [InlineKeyboardButton("üá®üá≥ CNY (–Æ–∞–Ω—å)", callback_data="105_165")],
                    [InlineKeyboardButton("üá∫üá∏ USD (–î–æ–ª–ª–∞—Ä)", callback_data="105_58")],
                    [InlineKeyboardButton("üá™üá∫ EUR (–ï–≤—Ä–æ)", callback_data="105_65")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(response, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É.")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ... 